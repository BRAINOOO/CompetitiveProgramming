/*
explanation : simply simulate the process step by step you will observe that if you will put an
edge between 2 nodes in the same set so you are doing a cycle ( a face ) else you the number of 
faces will never affected eg
                                     A
                                    / \
                                   /   \
                                  b     c    here the number of faces still the same but when i put an edge bc here the number of faces
                                             increased by one and so on :)
 */
#include <bits/stdc++.h>
#define sz(v)   ((int)(v).size())
#define  all(v)    ((v).begin()),((v).end())
#define  allr(v)    ((v).rbegin()),((v).rend())
#define   pb         push_back
#define   mp         make_pair
#define   mt         make_tuple
#define    clr(v,d)      memset( v, d ,sizeof(v))
#define   angle(n)      atan2((n.imag()),(n.real()))
#define   vec(a,b)       ((b)-(a))
#define   length(a)      hypot( (a.imag()),(a.real()) )
#define   normalize(a)      (a)/(length(a))
#define    dp(a,b)          (((conj(a))*(b)).real())
#define    cp(a,b)          (((conj(a))*(b)).imag())
#define    lengthsqrt(a)       dp(a,a)
#define    rotate0( a,ang)    ((a)*exp( point(0,ang) ))
#define    rotateA(about,p,ang)   (rotate0(vec(about,p),ang)+about)
#define    lcm(a,b)                ((a*b)/(__gcd(a,b)))
#define    reflection0(m,v)         (conj((v)/(m))*(m))
#define     reflectionA(m,v,p0)     (conj( (vec(p0,v))/(vec(p0,m)) ) * (vec(p0,m)) ) + p0
#define     same(p1,p2)               ( dp(  vec(p1,p2),vec(p1,p2)) < eps )
#define     point                    complex<double>
typedef  long long     ll ;
typedef  unsigned long long ull;
const double eps= (1e-10);
using namespace std;
int dcmp(double a,double b){   return fabs(a-b)<=eps ? 0: (a>b)? 1:-1  ;}
int getBit(int num, int idx) {return ((num >> idx) & 1) == 1;}
int setBit1(int num, int idx) {return num | (1<<idx);}
int setBit0(int num, int idx) {return num & ~(1<<idx);}
int flipBit(int num, int idx) {return num ^ (1<<idx);}
int countNumBit1(int mask) {int ret=0; while (mask) 	{mask &= (mask-1);++ret;	}return ret;}
int parent[100],rnk[100],faces,n,v;
map< char , int> mb;
void intil()
{
    for(int i=0;i<100;i++)
        parent[i]=i,rnk[i]=1;

}
int par(int n)
{
    if(parent[n]==n)
        return n;
    return parent[n]=par(parent[n]);
}
void unon(int f,int t)
{
   int  ff= par(f);
   int  tt= par(t);
    if(tt==ff)
    {
        faces++;
        return;
    }
    if(rnk[ff]>rnk[tt])
    {
        rnk[ff]+=rnk[tt];
        parent[tt]=ff;
    }
    else
    {
        rnk[tt]+=rnk[ff];
        parent[ff]=tt;
    }
}
int main()
{
   char  ch='a',ch2='A';
    for(int i=0;i<26;i++)
        mb[ch++]=i;
    for(int i=26;i<52;i++)
        mb[ch2++]=i;

   while( cin>>n>>v)
   {
       intil();
       faces=0;
        char c1,c2;
       for(int i=0;i<v;i++)
       {
           cin>>c1>>c2;
          int f=mb[c1];
          int t=mb[c2];
           unon(f,t);
       }
       cout<<faces+1<<endl;
   }
}
